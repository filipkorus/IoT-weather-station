generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  passwordHash String
  joined       DateTime       @default(now())
  gateways     Gateway[]
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique
  expires DateTime
  created DateTime @default(now())
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gateway {
  id          String        @id
  name        String        @default("Unnamed Gateway")
  latitude    Float?
  longitude   Float?
  apiKey      String        @unique @default(uuid())
  pairingCode String?       @unique
  isPaired    Boolean       @default(false)
  isOnline    Boolean       @default(false)
  lastOnline  DateTime?
  user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  nodes       Node[]
  likes       GatewayLike[]
}

model Node {
  id        String     @id
  name      String     @default("Unnamed Node")
  Gateway   Gateway?   @relation(fields: [gatewayId], references: [id])
  gatewayId String?
  NodeData  NodeData[]
}

model NodeData {
  id           Int      @id @default(autoincrement())
  created      DateTime @default(now())
  batteryLevel Float?
  Node         Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId       String
  temperature  Float?
  humidity     Float?
  pressure     Float?
  snowDepth    Float?
  pm1          Float?
  pm25         Float?
  pm10         Float?
}

model GatewayLike {
  id        Int      @id @default(autoincrement())
  ipAddr    String
  userAgent String
  created   DateTime @default(now())
  Gateway   Gateway  @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId String

  @@unique([ipAddr, userAgent, gatewayId])
}
